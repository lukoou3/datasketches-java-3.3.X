package org.apache.datasketches.hyperloglog;

import org.apache.datasketches.memory.internal.XxHash64;
import org.testng.annotations.Test;

import java.nio.charset.StandardCharsets;

import static org.apache.datasketches.ByteArrayUtil.*;

public class HLLRegTest {

    @Test
    public void test() {
        for (int i = 0; i < 100; i++) {
            String val = i + "";
            long h = XxHash64.hashString(val, 0, val.length(), 0);
            System.out.print(h + "LL, ");
            //System.out.println(h);
        }
    }

    @Test
    public void test22() {
        int p = 12;
        int m = 1 << p;
        for (int i = 0; i < 10; i++) {
            String val = i + "";
            long hashcode = XxHash64.hashString(val, 0, val.length(), 0);
            // LSB p bits
            final int idx = (int) (hashcode & (m - 1));
            final int idx2 = (int) (hashcode >>> (64 - p));
            System.out.println("idx:" + idx  + ",idx2:" + idx2  );
        }
        System.out.println("###############"  );
        long hashcode = 1;
        final int idx = (int) (hashcode & (m - 1));  // 后p位
        final int idx2 = (int) (hashcode >>> (64 - p)); // 前p位
        System.out.println("idx:" + idx  + ",idx2:" + idx2  );
    }

    @Test
    public void test23() {
        int p = 12;
        int m = 1 << p;
        for (int i = 0; i < 10; i++) {
            String val = i + "";
            long hashcode = XxHash64.hashString(val, 0, val.length(), 0);
            // 前64 - p
            final long w = hashcode >>> p;
            // longest run of trailing zeroes
            final int lr = Long.numberOfTrailingZeros(w) + 1;
            final byte zeroBits = (byte) lr;

            // 前64 - p
            final int lz = Math.min(Long.numberOfLeadingZeros(hashcode), 62) + 1;

            // 后64 - p
            final long w2 = hashcode << p | 1 << (p-1);
            // longest run of leading zeroes
            final int lr2 = Long.numberOfLeadingZeros(w2) + 1;
            final byte zeroBits2 = (byte) lr2;

            System.out.println("trailing:" + zeroBits+ ",leading1:" + lz + ",leading:" + zeroBits2 + ",hash:" + hashcode);
        }
    }

    @Test
    public void test2() {
        int p = 12;
        int m = 1 << p;
        for (int i = 0; i < 10; i++) {
            String val = i + "";
            long hashcode = XxHash64.hashString(val, 0, val.length(), 0);
            // LSB p bits
            final int idx = (int) (hashcode & (m - 1));


            // MSB 64 - p bits
            final long w = hashcode >>> p;
            // longest run of trailing zeroes
            final int lr = Long.numberOfTrailingZeros(w) + 1;
            final byte zeroBits = (byte) lr;
            System.out.println("idx:" + idx  + ",leading:" + zeroBits + ",hash:" + hashcode);
        }

        test22();
    }

    @Test
    public void test3() {
        int p = 12;
        int m = 1 << p;
        for (int i = 0; i < 10; i++) {
            String val = i + "";
            long hashcode = XxHash64.hashString(val, 0, val.length(), 0);
            // LSB p bits
            final int idx = (int) (hashcode >>> (64 - p));
            // MSB 64 - p bits
            final long w = hashcode << p | 1 << (p-1);
            // longest run of leading zeroes
            final int lr = Long.numberOfLeadingZeros(w) + 1;
            final byte zeroBits = (byte) lr;
            System.out.println("idx:" + idx  + ",leading:" + zeroBits + ",hash:" + hashcode);
        }
    }

    @Test
    public void numberOfLeadingZeros(){
        System.out.println(Long.numberOfLeadingZeros(1));
        System.out.println(Long.numberOfLeadingZeros(1000000));
        System.out.println(Long.numberOfLeadingZeros(0));
        System.out.println(Long.numberOfLeadingZeros(-1));
        System.out.println(Long.numberOfLeadingZeros(-1000000));
    }

    @Test
    public void testRegister() {
        int p = 12;
        // Determine how many registers are needed
        int reg = 1 << p;

        // Get the full words required
        int words = (reg + REG_PER_WORD - 1) / REG_PER_WORD;
        int[] registers = new int[words];

        for (int i = 0; i < 100; i++) {
            String val = i + "";
            long hashcode = XxHash64.hashString(val, 0, val.length(), 0);
            // LSB p bits
            final int idx = (int) (hashcode >>> (64 - p));
            // MSB 64 - p bits
            final long w = hashcode << p | 1 << (p-1);
            // longest run of leading zeroes
            final int lr = Long.numberOfLeadingZeros(w) + 1;
            final byte zeroBits = (byte) lr;
            System.out.println("idx:" + idx  + ",leading:" + zeroBits + ",hash:" + hashcode);
            if (zeroBits > get_register(registers, idx)) {
                set_register(registers, idx, zeroBits);
            }
        }

        System.out.println("###############");


        for (int i = 0; i < reg; i++) {
            int value = get_register(registers, i);
            if(value > 0){
                System.out.println(i + ":" + value);
            }
        }

    }

    static final int REG_PER_WORD = 5;
    static final int REG_WIDTH = 6;

    public int get_register(int[] registers, int idx) {
        int word = registers[idx / REG_PER_WORD];
        word = word >>> (REG_WIDTH * (idx % REG_PER_WORD));
        return word & ((1 << REG_WIDTH) - 1);
    }

    public void set_register(int[] registers, int idx, int val) {
        int i = idx / REG_PER_WORD;
        int word = registers[i];
        // Shift the val into place
        int shift = REG_WIDTH * (idx % REG_PER_WORD);
        val = val << shift;
        int val_mask = ((1 << REG_WIDTH) - 1) << shift;
        // Store the word
        registers[i] = (word & ~val_mask) | val;
    }

    @Test
    public void decodeFromC8bit() {
        String strgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAEAAgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAEAAAEAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAAAAAGAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAQAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAggAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
        byte[] bytes = StringUtils.decodeBase64(str.getBytes(StandardCharsets.UTF_8));
        assert(1 << 12 == bytes.length);
        System.out.println(bytes.length);
        for (int i = 0; i < bytes.length; i++) {
            if(bytes[i] > 0){
                System.out.println(i + ":" + bytes[i]);
            }
        }
    }

    @Test
    public void decodeFromC() {
        decodeFromC8bit();
        System.out.println("###############");
        decodeFromC6bitIntArray();
    }

    @Test
    public void decodeFromC6bitIntArray() {
        // 可以解析，大小端要保持一致
        String str = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAACAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAABAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAgAQAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQBAAAAAAAAAAAAAAQAAAEAAAAAAAAAAAAAAgwAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAQAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAAAAAAAAAAAAYAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAQAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAQAAAAAAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAA==";
        byte[] bytes = StringUtils.decodeBase64(str.getBytes(StandardCharsets.UTF_8));
        System.out.println(bytes.length);
        int len = 1 << 12;
        int size = (int) Math.ceil((len + 5 - 1) / (5));

        for (int i = 0; i < len; i++) {
            //int word =  getIntBE(bytes, i/5 * 4);
            int word =  getIntLE(bytes, i/5 * 4);
            word = word >>> (6 * (i % 5));
            int value = word & ((1 << 6) - 1);
            if(value > 0){
                System.out.println(i + ":" + value);
            }
        }

        System.out.println("###############");
    }

    /*
static int get_register(hll_t *h, int idx) {
    uint32_t word = *(h->registers + (idx / REG_PER_WORD));
    word = word >> REG_WIDTH * (idx % REG_PER_WORD);
    return word & ((1 << REG_WIDTH) - 1);
}

static void set_register(hll_t *h, int idx, int val) {
    uint32_t *word = h->registers + (idx / REG_PER_WORD);

    // Shift the val into place
    unsigned shift = REG_WIDTH * (idx % REG_PER_WORD);
    val = val << shift;
    uint32_t val_mask = ((1 << REG_WIDTH) - 1) << shift;

    // Store the word
    *word = (*word & ~val_mask) | val;
}

    */

    @Test
    public void decodeFromC6bit2() {
        String str
        byte[] bytes = StringUtils.decodeBase64(str.getBytes(StandardCharsets.UTF_8));
        System.out.println(bytes.length);
        int len = 1 << 12;
        for (int i = 0; i < len; i++) {
            int value = get6Bit2(bytes, 0, i);
            if(value > 0){
                System.out.println(i + ":" + value);
            }
        }
    }

    private static final int get6Bit2(final byte[] arr, final int offsetBytes, final int slotNo) {
        final int startBit = slotNo * 6;
        final int shift = startBit & 0X7;
        final int byteIdx = (startBit >>> 3) + offsetBytes;
        return (byte) ((getShortBE(arr, byteIdx) >>> shift) & 0X3F);
        //return (byte) ((getShortBE(arr, byteIdx) >>> shift) & 0X3F);
    }


    // 读取错误，两种语言实现方式不一样。
    @Test
    public void decodeFromC6bit() {
        String str
        byte[] bytes = StringUtils.decodeBase64(str.getBytes(StandardCharsets.UTF_8));
        System.out.println(bytes.length);
        int len = 1 << 12;
        for (int i = 0; i < len; i++) {
            int value = get6Bit(bytes, 0, i);
            if(value > 0){
                System.out.println(i + ":" + value);
            }
        }
    }

    private static final int get6Bit(final byte[] arr, final int offsetBytes, final int slotNo) {
        final int startBit = slotNo * 6;
        final int shift = startBit & 0X7;
        final int byteIdx = (startBit >>> 3) + offsetBytes;
        return (byte) ((getShortLE(arr, byteIdx) >>> shift) & 0X3F);
        //return (byte) ((getShortBE(arr, byteIdx) >>> shift) & 0X3F);
    }
}
